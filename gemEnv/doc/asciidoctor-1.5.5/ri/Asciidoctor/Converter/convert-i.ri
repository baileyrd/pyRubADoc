U:RDoc::AnyMethod[iI"convert:EFI"#Asciidoctor::Converter#convert;TF:publico:RDoc::Markup::Document:@parts[o:RDoc::Markup::Verbatim;	[I"j# Public: Invoked when this converter is added to the chain of converters in a {CompositeConverter}.
;TI"#
;TI"/# owner - The CompositeConverter instance
;TI"#
;TI"# Returns nothing
;TI"def composed owner
;TI"	end
;T:@format0o:RDoc::Markup::Paragraph;	[I"N# Public: Converts an {AbstractNode} using the specified transform along ;TI"Q# with additional options. If a transform is not specified, implementations ;TI"H# typically derive one from the {AbstractNode#node_name} property. ;TI"# ;TI"N# Implementations are free to decide how to carry out the conversion. In ;TI"J# the case of the built-in converters, the tranform value is used to ;TI"O# dispatch to a handler method. The {TemplateConverter} uses the value of ;TI"5# the transform to select a template to render. ;TI"# ;TI"D# node      - The concrete instance of AbstractNode to convert ;TI"S# transform - An optional String transform that hints at which transformation ;TI"T#             should be applied to this node. If a transform is not specified, ;TI"L#             the transform is typically derived from the value of the ;TI"G#             node's node_name property. (optional, default: nil) ;TI"S# opts      - An optional Hash of options that provide additional hints about ;TI"D#             how to convert the node. (optional, default: {}) ;TI"# ;TI""# Returns the [String] result;T:
@fileI"!lib/asciidoctor/converter.rb;T:0@omit_headings_from_table_of_contents_below000[[I"convert_with_options;To;;	[o;;	[I"&Alias for backward compatibility.;T;@(;0I"'(node, transform = nil, opts = {});T@(FI"Converter;FcRDoc::NormalModule00